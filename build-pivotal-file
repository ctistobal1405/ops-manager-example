#!/usr/bin/env bash

script_dir="$( cd "$( dirname "$0" )" && pwd )"

installation_dir="$script_dir/../installation"
version_num="${1:-1.0-build.0}"
stemcell_version="${2:-$($installation_dir/web/scripts/opsman_stemcell_version 2> /dev/null)}"
output_dir="${3:-/tmp}"
PRODUCT_NAME="${PRODUCT_NAME:-example-product}"

set -e

if [[ ! "$#" -eq 3 ]]; then
  echo "Usage: ${0} <version> <stemcell-version> <output-directory>">&2
  echo "With no arguments you will be given 'sensible' defaults"
  echo "this command is running as if you had typed the command:"
  echo "$0 $version_num $stemcell_version $output_dir"
fi

TMP_DIR="$(mktemp -d)"


mkdir -p "${TMP_DIR}/"{metadata,migrations,releases}

pushd $script_dir

  git clean -Xf $script_dir/${PRODUCT_NAME}/migrations

  # Add releases
  example-release/build-release-tarball "${TMP_DIR}/releases"
  # wget on linux was having trouble with the cloudfront url
  curl -fLo "${TMP_DIR}/releases/os-conf" https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=15
  release_file_name="$(basename ${TMP_DIR}/releases/*.tgz)"

  # Generate some files using the migration_templates into the migrations/v1 directory
  # broker-product doesn't currently have migrations, so we skip this step if there's no script
  if [ -f ${PRODUCT_NAME}/generate-migrations ]; then
    ${PRODUCT_NAME}/generate-migrations "${version_num}"

    # Add migrations
    cp -r $script_dir/${PRODUCT_NAME}/migrations/* "${TMP_DIR}/migrations"
  fi

  # Add metadata YAML
  ./generate-metadata "${version_num}" "${stemcell_version}" "${release_file_name}" "${PRODUCT_NAME}" > "${TMP_DIR}/metadata/${PRODUCT_NAME}.yml"

popd

(
  # Create .pivotal file

  cd "${TMP_DIR}"
  echo "creating .pivotal file"

  TARGET_FILE="${PRODUCT_NAME}-${version_num}.pivotal"
  zip -r "${output_dir}/${TARGET_FILE}" migrations metadata releases

  echo "created pivotal file: [${output_dir}/${TARGET_FILE}]"
)

test "$#" -eq 3 || printf "\e[0;33mRan with defaults:\e[m\n$0 $version_num $stemcell_version $output_dir\n"

echo "Done"
