#!/usr/bin/env bash

script_dir="$( cd "$( dirname "$0" )" && pwd )"
installation_dir="$script_dir/../installation"
tmp_dir="$(mktemp -d)"

default_version_num="1.0-build.0"
default_stemcell_version=$($installation_dir/web/scripts/opsman_stemcell_version 2> /dev/null)
default_output_dir="/tmp"
default_suffix=""
default_product_name="example-product"

version_num=${1:-"$default_version_num"}
stemcell_version=${2:-$default_stemcell_version}
output_dir=${3:-$default_output_dir}
suffix=${SUFFIX:-$default_suffic}
product_name="${PRODUCT_NAME:-$default_product_name}"

set -eu

main() {
  needs_help ${1:-""} && print_help && exit
  wants_dry_run ${1:-""} && print_dry_run && exit
  setup_tmp_workspace
  build_example_product_release
  fetch_dependency_releases
  generate_javascript_migrations
  generate_metadata
  package_pivotal_file
  print_success
}

needs_help() {
  test "$1" == '-h' -o "$1" == '--help'
}

wants_dry_run() {
  test "$1" == '-d' -o "$1" == '--dry-run'
}

setup_tmp_workspace() {
  mkdir -p "${tmp_dir}/"{metadata,migrations,releases}
}

build_example_product_release() {
  example-release/build-release-tarball "${tmp_dir}/releases" > /dev/null
}

fetch_dependency_releases() {
  curl -sfLo "${tmp_dir}/releases/os-conf" https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=15
}

get_release_path(){
  basename ${tmp_dir}/releases/*.tgz
}

generate_javascript_migrations() {
  git clean -Xf $script_dir/${product_name}/migrations > /dev/null
  if [ -f ${product_name}/generate-migrations ]; then
    ${product_name}/generate-migrations "${version_num}" > /dev/null
    cp -r $script_dir/${product_name}/migrations/* "${tmp_dir}/migrations"
  fi
}

generate_metadata() {
  ./generate-metadata \
    "${version_num}" \
    "${stemcell_version}" \
    "$(get_release_path)" \
    "${product_name}" \
    "${suffix}" > "${tmp_dir}/metadata/${product_name}.yml"
}

package_pivotal_file() {
  cd "${tmp_dir}"
  TARGET_FILE="${product_name}${suffix}-${version_num}.pivotal"
  zip -qr "${output_dir}/${TARGET_FILE}" migrations metadata releases
}

print_success() {
  printf "\e[0;1;32mFinished:\e[0m PRODUCT_NAME=$product_name SUFFIX=$suffix $0 $version_num $stemcell_version $output_dir" >&2
  echo ${output_dir}/${TARGET_FILE}
}


print_help() {
cat <<HERE >&2

Usage: [ENV_VARS] ${0} [switches] [PRODUCT_VERSION] [STEMCELL_VERSION] [OUTPUT_DIRECTORY]

  PRODUCT_VERSION:  version to give to the created tile
                    this is useful if you are creating two tiles of the different versions to test product upgrades
                    (default: ${default_version_num})

  STEMCELL_VERSION: stemcell version that tile will require
                    this is useful if you are testing stemcell requirements
                    (default: ${default_stemcell_version})
                    (note: the default is based off of the version of Ops Manager is checked out in workspace)

  OUTPUT_DIRECTORY: to where the new .pivotal file is written
                    (default: ${default_output_dir})

  switches:
    -d --dry-run:   print the command that would be run without building any files
    -h --help:      print this help

  ENV_VARS:
    PRODUCT_NAME:   generate a different example product
                    (default: ${default_product_name})

    SUFFIX:         a suffix to give to the example product's name and label
                    this is useful if you are testing adding multiple different products
                    (default: "${default_suffix}")

HERE
}

print_dry_run() {
  echo "PRODUCT_NAME=$default_product_name SUFFIX=$default_suffix $0 $default_version_num $default_stemcell_version $default_output_dir"
}

main $@
